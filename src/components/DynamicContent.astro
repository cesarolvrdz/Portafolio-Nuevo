---
/**
 * Componente Dinámico Universal
 * Renderiza automáticamente cualquier estructura de datos de Supabase
 */

import { getTableData, getTableSchema } from '../lib/dynamic-data.js';

interface Props {
  table: string;
  template?: 'list' | 'grid' | 'card' | 'table' | 'custom';
  limit?: number;
  filter?: Record<string, any>;
  orderBy?: { column: string; ascending: boolean };
  className?: string;
  showFields?: string[];
  hideFields?: string[];
  linkField?: string;
  imageFields?: string[];
  textFields?: string[];
  dateFields?: string[];
}

const {
  table,
  template = 'card',
  limit,
  filter,
  orderBy,
  className = '',
  showFields = [],
  hideFields = ['id', 'created_at', 'updated_at'],
  linkField = 'url',
  imageFields = ['image', 'image_url', 'photo', 'avatar', 'thumbnail', 'preview'],
  textFields = ['description', 'content', 'bio', 'summary', 'text'],
  dateFields = ['date', 'created_at', 'updated_at', 'published_at']
} = Astro.props;

// Obtener datos y esquema de la tabla
const data = await getTableData(table, { filter, orderBy, limit });
const schema = await getTableSchema(table);

// Si no hay datos, no mostrar nada
if (!data || data.length === 0) {
  // Mostrar mensaje de debug en desarrollo
  if (import.meta.env.DEV) {
    console.log(`No data found for table: ${table}`);
  }
} else {
  console.log(`Loaded ${data.length} records from ${table}`);
}

// Función para determinar el tipo de campo
function getFieldType(field: string, value: any, schema: any): string {
  if (imageFields.includes(field.toLowerCase()) || 
      (typeof value === 'string' && (value.includes('.jpg') || value.includes('.png') || value.includes('.gif') || value.includes('.webp') || value.includes('.svg')))) {
    return 'image';
  }
  
  if (dateFields.includes(field.toLowerCase()) || 
      (typeof value === 'string' && /^\d{4}-\d{2}-\d{2}/.test(value))) {
    return 'date';
  }
  
  if (field.toLowerCase() === linkField || 
      (typeof value === 'string' && (value.startsWith('http') || value.startsWith('www')))) {
    return 'link';
  }
  
  if (textFields.includes(field.toLowerCase()) || 
      (typeof value === 'string' && value.length > 100)) {
    return 'text';
  }
  
  if (typeof value === 'boolean') {
    return 'boolean';
  }
  
  if (typeof value === 'number') {
    return 'number';
  }
  
  return 'string';
}

// Función para formatear valores
function formatValue(value: any, type: string): string {
  if (value === null || value === undefined) return '';
  
  switch (type) {
    case 'date':
      return new Date(value).toLocaleDateString('es-ES', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    case 'boolean':
      return value ? 'Sí' : 'No';
    case 'text':
      return value.length > 200 ? value.substring(0, 200) + '...' : value;
    default:
      return value.toString();
  }
}

// Función para obtener campos visibles
function getVisibleFields(record: any): string[] {
  const allFields = Object.keys(record);
  
  if (showFields.length > 0) {
    return allFields.filter(field => showFields.includes(field));
  }
  
  return allFields.filter(field => !hideFields.includes(field));
}

// Función para obtener el título principal de un registro
function getMainTitle(record: any, fields: string[]): string {
  const titleFields = ['title', 'name', 'project_name', 'company', 'skill', 'platform'];
  
  for (const field of titleFields) {
    if (record[field]) return record[field];
  }
  
  // Si no encuentra un campo de título específico, usar el primer campo de texto
  for (const field of fields) {
    if (typeof record[field] === 'string' && record[field].length > 0 && record[field].length < 100) {
      return record[field];
    }
  }
  
  return `Registro ${record.id || ''}`;
}

// Función para obtener la imagen principal
function getMainImage(record: any): string | null {
  for (const field of imageFields) {
    if (record[field]) return record[field];
  }
  return null;
}

// Función para obtener la descripción
function getDescription(record: any, fields: string[]): string | null {
  for (const field of textFields) {
    if (record[field]) return record[field];
  }
  
  // Buscar cualquier campo de texto largo
  for (const field of fields) {
    if (typeof record[field] === 'string' && record[field].length > 50) {
      return record[field];
    }
  }
  
  return null;
}
---

{data && data.length > 0 && (
  <div class={`dynamic-content dynamic-${template} ${className}`}>
    
    {template === 'table' && (
      <div class="overflow-x-auto">
        <table class="min-w-full bg-white dark:bg-gray-800 rounded-lg shadow-lg">
          <thead>
            <tr class="bg-gray-50 dark:bg-gray-700">
              {getVisibleFields(data[0]).map((field, fieldIndex) => (
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                  {field.replace(/_/g, ' ')}
                </th>
              ))}
            </tr>
          </thead>
          <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-600">
            {data.map((record: any, index: number) => (
              <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
                {getVisibleFields(record).map((field, fieldIndex) => {
                  const fieldType = getFieldType(field, record[field], schema);
                  return (
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                      {fieldType === 'image' && record[field] ? (
                        <img src={record[field]} alt={field} class="h-10 w-10 rounded-full object-cover" />
                      ) : fieldType === 'link' && record[field] ? (
                        <a href={record[field]} target="_blank" rel="noopener noreferrer" 
                           class="text-blue-600 dark:text-blue-400 hover:underline">
                          Ver enlace
                        </a>
                      ) : fieldType === 'boolean' ? (
                        <span class={`px-2 py-1 text-xs rounded-full ${record[field] ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' : 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'}`}>
                          {formatValue(record[field], fieldType)}
                        </span>
                      ) : (
                        <span>{formatValue(record[field], fieldType)}</span>
                      )}
                    </td>
                  );
                })}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    )}

    {template === 'list' && (
      <div class="space-y-4">
        {data.map((record: any, index: number) => {
          const fields = getVisibleFields(record);
          const mainTitle = getMainTitle(record, fields);
          const mainImage = getMainImage(record);
          const description = getDescription(record, fields);
          
          return (
            <div class="flex items-start space-x-4 p-4 bg-white dark:bg-gray-800 rounded-lg shadow hover:shadow-lg transition-shadow">
              {mainImage && (
                <img src={mainImage} alt={mainTitle} class="w-16 h-16 rounded-lg object-cover flex-shrink-0" />
              )}
              <div class="flex-1 min-w-0">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100 truncate">
                  {mainTitle}
                </h3>
                {description && (
                  <p class="text-gray-600 dark:text-gray-400 text-sm mt-1 line-clamp-2">
                    {formatValue(description, 'text')}
                  </p>
                )}
                <div class="flex flex-wrap gap-2 mt-2">
                  {fields.slice(0, 3).map((field, fieldIndex) => {
                    if (field === 'title' || field === 'name' || textFields.includes(field) || imageFields.includes(field)) return null;
                    const fieldType = getFieldType(field, record[field], schema);
                    return (
                      <span class="text-xs bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-2 py-1 rounded">
                        <strong>{field.replace(/_/g, ' ')}:</strong> {formatValue(record[field], fieldType)}
                      </span>
                    );
                  })}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    )}

    {template === 'grid' && (
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {data.map((record: any, index: number) => {
          const fields = getVisibleFields(record);
          const mainTitle = getMainTitle(record, fields);
          const mainImage = getMainImage(record);
          const description = getDescription(record, fields);
          
          return (
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow">
              {mainImage && (
                <div class="h-48 bg-gray-200 dark:bg-gray-700">
                  <img src={mainImage} alt={mainTitle} class="w-full h-full object-cover" />
                </div>
              )}
              <div class="p-6">
                <h3 class="text-xl font-semibold text-gray-900 dark:text-gray-100 mb-2">
                  {mainTitle}
                </h3>
                {description && (
                  <p class="text-gray-600 dark:text-gray-400 text-sm mb-4 line-clamp-3">
                    {formatValue(description, 'text')}
                  </p>
                )}
                <div class="space-y-2">
                  {fields.slice(0, 4).map((field, fieldIndex) => {
                    if (field === 'title' || field === 'name' || textFields.includes(field) || imageFields.includes(field)) return null;
                    const fieldType = getFieldType(field, record[field], schema);
                    return (
                      <div class="text-sm">
                        <span class="font-medium text-gray-700 dark:text-gray-300">
                          {field.replace(/_/g, ' ')}:
                        </span>
                        <span class="ml-2 text-gray-600 dark:text-gray-400">
                          {formatValue(record[field], fieldType)}
                        </span>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          );
        })}
      </div>
    )}

    {template === 'card' && (
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {data.map((record: any, index: number) => {
          const fields = getVisibleFields(record);
          const mainTitle = getMainTitle(record, fields);
          const mainImage = getMainImage(record);
          const description = getDescription(record, fields);
          const url = record[linkField] || record.url || record.link;
          
          return (
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2">
              {mainImage && (
                <div class="h-56 bg-gradient-to-r from-blue-400 to-purple-500">
                  <img src={mainImage} alt={mainTitle} class="w-full h-full object-cover" />
                </div>
              )}
              <div class="p-6">
                <h3 class="text-xl font-bold text-gray-900 dark:text-gray-100 mb-3">
                  {mainTitle}
                </h3>
                {description && (
                  <p class="text-gray-600 dark:text-gray-400 mb-4 line-clamp-3">
                    {formatValue(description, 'text')}
                  </p>
                )}
                
                <div class="grid grid-cols-2 gap-3 mb-4">
                  {fields.filter(field => 
                    !['title', 'name', 'id'].includes(field) && 
                    !textFields.includes(field) && 
                    !imageFields.includes(field) &&
                    record[field] !== null && 
                    record[field] !== undefined && 
                    record[field] !== ''
                  ).slice(0, 4).map((field, fieldIndex) => {
                    const fieldType = getFieldType(field, record[field], schema);
                    return (
                      <div class="text-sm">
                        <dt class="font-medium text-gray-500 dark:text-gray-400 text-xs uppercase tracking-wide">
                          {field.replace(/_/g, ' ')}
                        </dt>
                        <dd class="mt-1 text-gray-900 dark:text-gray-100">
                          {fieldType === 'link' ? (
                            <a href={record[field]} target="_blank" rel="noopener noreferrer" 
                               class="text-blue-600 dark:text-blue-400 hover:underline">
                              Ver enlace
                            </a>
                          ) : (
                            formatValue(record[field], fieldType)
                          )}
                        </dd>
                      </div>
                    );
                  })}
                </div>

                {url && (
                  <a href={url} target="_blank" rel="noopener noreferrer"
                     class="inline-flex items-center px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white text-sm font-medium rounded-lg transition-colors duration-200">
                    Ver más
                    <svg class="ml-2 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width={2} d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14" />
                    </svg>
                  </a>
                )}
              </div>
            </div>
          );
        })}
      </div>
    )}

  </div>
)}

{(!data || data.length === 0) && import.meta.env.DEV && (
  <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4">
    <div class="flex">
      <div class="flex-shrink-0">
        <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
        </svg>
      </div>
      <div class="ml-3">
        <h3 class="text-sm font-medium text-yellow-800 dark:text-yellow-200">
          Sin datos para mostrar
        </h3>
        <div class="mt-2 text-sm text-yellow-700 dark:text-yellow-300">
          <p>No se encontraron datos en la tabla <strong>{table}</strong>. Verifica que:</p>
          <ul class="list-disc list-inside mt-2 space-y-1">
            <li>La tabla existe en Supabase</li>
            <li>Hay datos en la tabla</li>
            <li>Los filtros aplicados son correctos</li>
            <li>La configuración de Supabase es correcta</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
)}

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
